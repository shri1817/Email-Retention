{"version":3,"sources":["useTableColumnSizing.js"],"sourcesContent":["import * as React from 'react';\nimport { TableResizeHandle } from '../TableResizeHandle';\nimport { useMeasureElement } from './useMeasureElement';\nimport { useTableColumnResizeMouseHandler } from './useTableColumnResizeMouseHandler';\nimport { useTableColumnResizeState } from './useTableColumnResizeState';\nimport { useKeyboardResizing } from './useKeyboardResizing';\nexport const defaultColumnSizingState = {\n    getColumnWidths: ()=>[],\n    getOnMouseDown: ()=>()=>null,\n    setColumnWidth: ()=>null,\n    getTableProps: ()=>({}),\n    getTableHeaderCellProps: ()=>({\n            style: {},\n            columnId: ''\n        }),\n    getTableCellProps: ()=>({\n            style: {},\n            columnId: ''\n        }),\n    enableKeyboardMode: ()=>()=>null\n};\nexport function useTableColumnSizing_unstable(params) {\n    // False positive, these plugin hooks are intended to be run on every render\n    return (tableState)=>// eslint-disable-next-line react-hooks/rules-of-hooks\n        useTableColumnSizingState(tableState, {\n            autoFitColumns: true,\n            ...params\n        });\n}\nfunction getColumnStyles(column, dragging) {\n    const width = column.width;\n    return {\n        // native styles\n        width,\n        // non-native element styles (flex layout)\n        minWidth: width,\n        maxWidth: width,\n        // Fixed the unwanted sort: https://github.com/microsoft/fluentui/issues/27803\n        ...dragging ? {\n            pointerEvents: 'none'\n        } : {}\n    };\n}\nfunction useTableColumnSizingState(tableState, params = {}) {\n    const { columns } = tableState;\n    // Gets the container width\n    const { width, measureElementRef } = useMeasureElement();\n    // Creates the state based on columns and available containerWidth\n    const columnResizeState = useTableColumnResizeState(columns, width + ((params === null || params === void 0 ? void 0 : params.containerWidthOffset) || 0), params);\n    // Creates the mouse handler and attaches the state to it\n    const mouseHandler = useTableColumnResizeMouseHandler(columnResizeState);\n    // Creates the keyboard handler for resizing columns\n    const { toggleInteractiveMode, getKeyboardResizingProps } = useKeyboardResizing(columnResizeState);\n    const { autoFitColumns } = params;\n    const enableKeyboardMode = React.useCallback((columnId, onChange)=>(e)=>{\n            e.preventDefault();\n            e.nativeEvent.stopPropagation();\n            toggleInteractiveMode(columnId, onChange);\n        }, [\n        toggleInteractiveMode\n    ]);\n    const { getColumnById, setColumnWidth, getColumns } = columnResizeState;\n    const { getOnMouseDown, dragging } = mouseHandler;\n    return {\n        ...tableState,\n        tableRef: measureElementRef,\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        columnSizing_unstable: {\n            getOnMouseDown,\n            setColumnWidth: (columnId, w)=>setColumnWidth(undefined, {\n                    columnId,\n                    width: w\n                }),\n            getColumnWidths: getColumns,\n            getTableProps: (props = {})=>{\n                return {\n                    ...props,\n                    style: {\n                        minWidth: 'fit-content',\n                        ...props.style || {}\n                    }\n                };\n            },\n            getTableHeaderCellProps: React.useCallback((columnId)=>{\n                var _columns_;\n                const col = getColumnById(columnId);\n                const isLastColumn = ((_columns_ = columns[columns.length - 1]) === null || _columns_ === void 0 ? void 0 : _columns_.columnId) === columnId;\n                const aside = isLastColumn && autoFitColumns ? null : /*#__PURE__*/ React.createElement(TableResizeHandle, {\n                    onMouseDown: getOnMouseDown(columnId),\n                    onTouchStart: getOnMouseDown(columnId),\n                    ...getKeyboardResizingProps(columnId, (col === null || col === void 0 ? void 0 : col.width) || 0)\n                });\n                return col ? {\n                    style: getColumnStyles(col, dragging),\n                    aside\n                } : {};\n            }, [\n                getColumnById,\n                columns,\n                dragging,\n                getKeyboardResizingProps,\n                getOnMouseDown,\n                autoFitColumns\n            ]),\n            getTableCellProps: React.useCallback((columnId)=>{\n                const col = getColumnById(columnId);\n                return col ? {\n                    style: getColumnStyles(col)\n                } : {};\n            }, [\n                getColumnById\n            ]),\n            enableKeyboardMode\n        }\n    };\n}\n"],"names":["defaultColumnSizingState","useTableColumnSizing_unstable","getColumnWidths","getOnMouseDown","setColumnWidth","getTableProps","getTableHeaderCellProps","style","columnId","getTableCellProps","enableKeyboardMode","params","tableState","useTableColumnSizingState","autoFitColumns","getColumnStyles","column","dragging","width","minWidth","maxWidth","pointerEvents","columns","measureElementRef","useMeasureElement","columnResizeState","useTableColumnResizeState","containerWidthOffset","mouseHandler","useTableColumnResizeMouseHandler","toggleInteractiveMode","getKeyboardResizingProps","useKeyboardResizing","React","useCallback","onChange","e","preventDefault","nativeEvent","stopPropagation","getColumnById","getColumns","tableRef","columnSizing_unstable","w","undefined","props","_columns_","col","isLastColumn","length","aside","createElement","TableResizeHandle","onMouseDown","onTouchStart"],"mappings":";;;;;;;;;;;IAMaA,wBAAwB;eAAxBA;;IAeGC,6BAA6B;eAA7BA;;;;iEArBO;mCACW;mCACA;kDACe;2CACP;qCACN;AAC7B,MAAMD,2BAA2B;IACpCE,iBAAiB,IAAI,EAAE;IACvBC,gBAAgB,IAAI,IAAI;IACxBC,gBAAgB,IAAI;IACpBC,eAAe,IAAK,CAAA,CAAC,CAAA;IACrBC,yBAAyB,IAAK,CAAA;YACtBC,OAAO,CAAC;YACRC,UAAU;QACd,CAAA;IACJC,mBAAmB,IAAK,CAAA;YAChBF,OAAO,CAAC;YACRC,UAAU;QACd,CAAA;IACJE,oBAAoB,IAAI,IAAI;AAChC;AACO,SAAST,8BAA8BU,MAAM;IAChD,4EAA4E;IAC5E,OAAO,CAACC,aACJC,0BAA0BD,YAAY;YAClCE,gBAAgB;YAChB,GAAGH,MAAM;QACb;AACR;AACA,SAASI,gBAAgBC,MAAM,EAAEC,QAAQ;IACrC,MAAMC,QAAQF,OAAOE,KAAK;IAC1B,OAAO;QACH,gBAAgB;QAChBA;QACA,0CAA0C;QAC1CC,UAAUD;QACVE,UAAUF;QACV,8EAA8E;QAC9E,GAAGD,WAAW;YACVI,eAAe;QACnB,IAAI,CAAC,CAAC;IACV;AACJ;AACA,SAASR,0BAA0BD,UAAU,EAAED,SAAS,CAAC,CAAC;IACtD,MAAM,EAAEW,OAAO,EAAE,GAAGV;IACpB,2BAA2B;IAC3B,MAAM,EAAEM,KAAK,EAAEK,iBAAiB,EAAE,GAAGC,IAAAA,oCAAiB;IACtD,kEAAkE;IAClE,MAAMC,oBAAoBC,IAAAA,oDAAyB,EAACJ,SAASJ,QAAS,CAAA,AAACP,CAAAA,WAAW,QAAQA,WAAW,KAAK,IAAI,KAAK,IAAIA,OAAOgB,oBAAoB,AAAD,KAAM,CAAA,GAAIhB;IAC3J,yDAAyD;IACzD,MAAMiB,eAAeC,IAAAA,kEAAgC,EAACJ;IACtD,oDAAoD;IACpD,MAAM,EAAEK,qBAAqB,EAAEC,wBAAwB,EAAE,GAAGC,IAAAA,wCAAmB,EAACP;IAChF,MAAM,EAAEX,cAAc,EAAE,GAAGH;IAC3B,MAAMD,qBAAqBuB,OAAMC,WAAW,CAAC,CAAC1B,UAAU2B,WAAW,CAACC;YAC5DA,EAAEC,cAAc;YAChBD,EAAEE,WAAW,CAACC,eAAe;YAC7BT,sBAAsBtB,UAAU2B;QACpC,GAAG;QACHL;KACH;IACD,MAAM,EAAEU,aAAa,EAAEpC,cAAc,EAAEqC,UAAU,EAAE,GAAGhB;IACtD,MAAM,EAAEtB,cAAc,EAAEc,QAAQ,EAAE,GAAGW;IACrC,OAAO;QACH,GAAGhB,UAAU;QACb8B,UAAUnB;QACV,gEAAgE;QAChEoB,uBAAuB;YACnBxC;YACAC,gBAAgB,CAACI,UAAUoC,IAAIxC,eAAeyC,WAAW;oBACjDrC;oBACAU,OAAO0B;gBACX;YACJ1C,iBAAiBuC;YACjBpC,eAAe,CAACyC,QAAQ,CAAC,CAAC;gBACtB,OAAO;oBACH,GAAGA,KAAK;oBACRvC,OAAO;wBACHY,UAAU;wBACV,GAAG2B,MAAMvC,KAAK,IAAI,CAAC,CAAC;oBACxB;gBACJ;YACJ;YACAD,yBAAyB2B,OAAMC,WAAW,CAAC,CAAC1B;gBACxC,IAAIuC;gBACJ,MAAMC,MAAMR,cAAchC;gBAC1B,MAAMyC,eAAe,AAAC,CAAA,AAACF,CAAAA,YAAYzB,OAAO,CAACA,QAAQ4B,MAAM,GAAG,EAAE,AAAD,MAAO,QAAQH,cAAc,KAAK,IAAI,KAAK,IAAIA,UAAUvC,QAAQ,AAAD,MAAOA;gBACpI,MAAM2C,QAAQF,gBAAgBnC,iBAAiB,OAAO,WAAW,GAAGmB,OAAMmB,aAAa,CAACC,oCAAiB,EAAE;oBACvGC,aAAanD,eAAeK;oBAC5B+C,cAAcpD,eAAeK;oBAC7B,GAAGuB,yBAAyBvB,UAAU,AAACwC,CAAAA,QAAQ,QAAQA,QAAQ,KAAK,IAAI,KAAK,IAAIA,IAAI9B,KAAK,AAAD,KAAM,EAAE;gBACrG;gBACA,OAAO8B,MAAM;oBACTzC,OAAOQ,gBAAgBiC,KAAK/B;oBAC5BkC;gBACJ,IAAI,CAAC;YACT,GAAG;gBACCX;gBACAlB;gBACAL;gBACAc;gBACA5B;gBACAW;aACH;YACDL,mBAAmBwB,OAAMC,WAAW,CAAC,CAAC1B;gBAClC,MAAMwC,MAAMR,cAAchC;gBAC1B,OAAOwC,MAAM;oBACTzC,OAAOQ,gBAAgBiC;gBAC3B,IAAI,CAAC;YACT,GAAG;gBACCR;aACH;YACD9B;QACJ;IACJ;AACJ"}